from tqdm import tqdm


sbox  = [
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16],
]




def key_expansion(key):
    rcon = [
        [0x01, 0x00, 0x00, 0x00],
        [0x02, 0x00, 0x00, 0x00],
        [0x04, 0x00, 0x00, 0x00],
        [0x08, 0x00, 0x00, 0x00],
        [0x10, 0x00, 0x00, 0x00],
        [0x20, 0x00, 0x00, 0x00],
        [0x40, 0x00, 0x00, 0x00],
        [0x80, 0x00, 0x00, 0x00],
        [0x1b, 0x00, 0x00, 0x00],
        [0x36, 0x00, 0x00, 0x00]
    ]
    expanded_keys = []
    expanded_keys.append([key[i:i + 4] for i in range(0, len(key), 4)])

    for round_num in range(0, 10):
        prev_key = expanded_keys[-1]
        new_key = prev_key.copy()

        # Генерация первой колонки нового ключа
        temp = new_key[-1]
        temp = temp[1:] + temp[:1]  # Циклический сдвиг
        temp = [sbox[b >> 4][b & 0x0F] for b in temp]  # S-box замена
        for i in range(len(temp)):
            temp[i] ^= rcon[round_num][i]

        new_key[0] = [prev_key[0][i] ^ temp[i] for i in range(4)]

        # Генерация остальных колонок
        for i in range(1, 4):
            new_key[i] = [new_key[i - 1][j] ^ prev_key[i][j] for j in range(4)]

        expanded_keys.append(new_key)

    return expanded_keys


def add_round_key(matrix, round_key):
    return [[matrix[i][j] ^ round_key[i][j] for j in range(4)] for i in range(4)]


def code(filename, key):
    data = read_file(filename)
    key_schedule = key_expansion(key)
    encrypted_data = bytearray()

    num_blocks = len(data) // 16 + (1 if len(data) % 16 != 0 else 0)  # Количество блоков

    with tqdm(total=num_blocks, desc="Encrypting", unit="block") as pbar:
        for i in range(0, len(data), 16):
            block = data[i:i + 16]

            # Преобразуем блок в матрицу 4x4
            state = [[block[row + col * 4] if row + col * 4 < len(block) else 0 for col in range(4)] for row in
                     range(4)]

            # Начальный раундовый ключ
            state = add_round_key(state, key_schedule[0])

            # Основные 9 раундов
            for round_num in range(1, 10):
                state = subbytes(state)
                state = shiftrows(state)
                if round_num != 9:
                    state = mixcolumns(state)
                state = add_round_key(state, key_schedule[round_num])

            # Преобразуем обратно в байтовый массив
            encrypted_data.extend([state[row][col] for col in range(4) for row in range(4)])

            pbar.update(1)  # Обновляем прогресс-бар

    return encrypted_data


#
def subbytes(matrix):
    for i in range(4):
        for j in range(4):
            row_idx = matrix[i][j] >> 4  # Вычисляем номер строки в S-Box
            col_idx = matrix[i][j] & 0x0F  # Вычисляем номер столбца в S-Box
            matrix[i][j] = sbox[row_idx][col_idx]  # Заменяем байт через S-Box
    return matrix



#
def mixcolumns(matrix):
    # Матрица для умножения
    mix_matrix = [
        [2, 3, 1, 1],
        [1, 2, 3, 1],
        [1, 1, 2, 3],
        [3, 1, 1, 2]
    ]

    # Функция для умножения с использованием поля Галуа
    def gmul(a, b):
        result = 0
        while b:
            if b & 1:
                result ^= a
            a <<= 1
            if a & 0x100:
                a ^= 0x11B
            b >>= 1
        return result

    # Новый список для хранения результата
    new_state = [[0] * 4 for _ in range(4)]

    # Применение операции mixcolumns
    for i in range(4):  # Для каждой колонки
        for j in range(4):  # Для каждого элемента в колонке
            value = 0
            for k in range(4):  # Суммируем элементы
                value ^= gmul(mix_matrix[j][k], matrix[k][i])
            new_state[j][i] = value

    return new_state

def shiftrows(matrix):
    shift = 0
    for row in matrix:
        for count in range(shift):
            temp = row[len(row) - 1]
            for i in range(len(row)):
                row[len(row) - 1 - i] = row[len(row) - 1 - i - 1]
            row[0] = temp
        shift += 1
    return matrix



def read_file(filename):
    with open(filename, "rb") as file_input:
        data_input = bytearray(file_input.read())
        print(f"Opened {filename}")
    return data_input